/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.13.1"
    id("org.nosphere.apache.rat") version "0.3.1"
    id "com.jfrog.artifactory" version "4.9.5"
}

apply from: '../shared.gradle'

dependencies {
    compile(
            [group: 'org.springframework.cloud', name: 'spring-cloud-starter-feign'],
            [group: 'org.apache.fineract.cn', name: 'api', version: versions.frameworkapi],
            [group: 'org.apache.fineract.cn', name: 'cassandra', version: versions.frameworkcassandra],
            [group: 'org.apache.fineract.cn', name: 'command', version: versions.frameworkcommand],
            [group: 'org.hibernate', name: 'hibernate-validator', version: versions.validator],
            [group: 'org.hibernate', name: 'hibernate-validator-annotation-processor', version: versions.validator]
    )

    testCompile(
            [group: 'org.apache.fineract.cn', name: 'test', version: versions.frameworktest],
    )
}

publishing {
    publications {
        api(MavenPublication) {
            from components.java
            groupId project.group
            artifactId project.name
            version project.findProperty('externalVersion') ?: project.version
        }
    }
    repositories {
        maven {
            def repo = version.endsWith('SNAPSHOT') ? 'waas-snapshot' : 'waas'
            url "http://registry-nd.dev.redbee.io/repository/${repo}"

            credentials {
                username = String.valueOf(System.getenv("NEXUS_USER"))
                password = String.valueOf(System.getenv("NEXUS_PASS"))
            }

        }
    }
}
