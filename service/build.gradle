/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext {
        springBootVersion = '1.4.1.RELEASE'
    }

    repositories {
        jcenter()
    }

    dependencies {
        classpath ("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.13.1"
    id("org.nosphere.apache.rat") version "0.3.1"
    id "com.jfrog.artifactory" version "4.9.5"
}

apply from: '../shared.gradle'

apply plugin: 'spring-boot'
apply plugin: 'docker'

springBoot {
    executable = true
    classifier = 'boot'
}

dependencies {
    compile(
            [group: 'org.springframework.cloud', name: 'spring-cloud-starter-config'],
            [group: 'org.springframework.cloud', name: 'spring-cloud-starter-eureka'],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-jetty'],
            [group: 'org.apache.fineract.cn.rhythm', name: 'api', version: project.version],
            [group: 'org.apache.fineract.cn.rhythm', name: 'spi', version: project.version],
            [group: 'org.apache.fineract.cn.anubis', name: 'library', version: versions.frameworkanubis],
            [group: 'org.apache.fineract.cn.identity', name: 'api', version: versions.identity],
            [group: 'org.apache.fineract.cn.permitted-feign-client', name: 'library', version: versions.frameworkpermittedfeignclient],
            [group: 'com.google.code.gson', name: 'gson'],
            [group: 'org.apache.fineract.cn', name: 'lang', version: versions.frameworklang],
            [group: 'org.apache.fineract.cn', name: 'async', version: versions.frameworkasync],
            [group: 'org.apache.fineract.cn', name: 'cassandra', version: versions.frameworkcassandra],
            [group: 'org.apache.fineract.cn', name: 'mariadb', version: versions.frameworkmariadb],
            [group: 'org.apache.fineract.cn', name: 'command', version: versions.frameworkcommand],
            [group: 'org.hibernate', name: 'hibernate-validator', version: versions.validator],
            [group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '4.11'],
            [group: 'ch.qos.logback', name: 'logback-core', version: '1.1.8']
    )

    // redbee added - compatibility with kafka client in command jar new version
    compile ('org.apache.kafka:kafka-clients:0.11.0.2') {
        force true
    }

    compile ('org.springframework:spring-messaging:4.3.3.RELEASE') {
        exclude group: 'org.apache.kafka', module: 'kafka-clients'
    }
}

publishToMavenLocal.dependsOn bootRepackage

publishing {
    publications {
        service(MavenPublication) {
            from components.java
            groupId project.group
            artifactId project.name
            version project.findProperty('externalVersion') ?: project.version
        }
        bootService(MavenPublication) {
            // "boot" jar
            artifact ("$buildDir/libs/$project.name-$version-boot.jar")
            groupId project.group
            artifactId ("$project.name-boot")
            version project.findProperty('externalVersion') ?: project.version
        }
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

def dockerImage = 'fineract-cn-rhythm'

////START Build docker image
if (!project.hasProperty("dockerImgName")) {
    ext.dockerImgName = "${dockerImage}"
}
if (!project.hasProperty("dockerTag")) {
    ext.dockerTag = "latest"
}
if (!project.hasProperty("dockerRegistry")) {
    ext.dockerRegistry = "registry.dev.redbee.io"
}
if (!project.hasProperty("dockerPushToRegistry")) {
    ext.dockerPushToRegistry = true
}
task buildDocker(type: Docker, dependsOn: build) {
    baseImage = "openjdk:8-jdk-alpine"
    maintainer = "vbees"
    hostUrl = "https://registry.dev.redbee.io"
    push = dockerPushToRegistry.toBoolean()
    dryRun = false
    tagVersion = "${dockerTag}"
    tag = "${dockerRegistry}/${dockerImgName}"
    addFile {
        from bootRepackage
        rename { "${dockerImgName}.jar" }
    }
    addFile("./java-entrypoint.sh", "/java-entrypoint.sh")
    //exposePort(8080)

    entryPoint([
        "/java-entrypoint.sh",
        "/${dockerImgName}.jar"
    ])
}
